#!/usr/bin/env escript
%% -*- mode: erlang;erlang-indent-level: 4;indent-tabs-mode: nil -*-
%% ex: ft=erlang ts=4 sw=4 et
%% -------------------------------------------------------------------
%%
%% nodetool: Helper Script for interacting with live nodes
%%
%% -------------------------------------------------------------------
-define(RPC_TIMEOUT, 60 * 1000). %% 1 minute

main(Args0) ->

    %% Extract the args
    Args = process_args(Args0),

    Action   = get_arg("action",   Args),
    Node     = get_arg("node",     Args),
    NameType = get_arg("nametype", Args, shortnames),

    ThisNode   = append_node_suffix(Node, "_maint_"),

    ok = start_distribution(ThisNode, NameType),

    TargetNode = nodename(Node),

    case Action of
        "getpid" ->
            Cb = fun(Pid) ->
                         success("~p", [list_to_integer(Pid)])
                 end,
            rpc(os, getpid, [], Args, Cb);
        "ping" ->
            case net_adm:ping(TargetNode) of
                pong ->
                    success("pong");
                pang ->
                    fail("Node ~p not responding to pings.", [TargetNode])
            end;
        "stop" ->
            rpc(init, stop, [], Args);
        "restart" ->
            rpc(init, restart, [], Args);
        "reboot" ->
            rpc(init, reboot, [], Args);
        "eval" ->
            Command = get_arg("command", Args, "") ++ ".",
            case erl_scan:string(Command) of
                {ok, Tokens, _} ->
                    case erl_parse:parse_exprs(Tokens) of
                        {ok, Exprs} ->
                            Cb = fun({value, Value, _}) ->
                                         success("~p", [Value])
                                 end,
                            rpc(erl_eval, exprs, [Exprs, []], Args, Cb);
                        {error, Reason} ->
                            Msg = format_parse_error(Reason),
                            fail(Msg)
                    end;
                {error, Reason, _} ->
                    Msg = format_parse_error(Reason),
                    fail(Msg)
            end;
        _Other ->
            fail("Wrong usage")
    end,
    net_kernel:stop().

process_args(Args) ->
    process_args(Args, []).

process_args([], Acc) ->
    Acc; %% No need to reverse
process_args([H|T], Acc) ->
    case string:tokens(H, [$=]) of
        ["cookie", Cookie] ->
            erlang:set_cookie(node(), list_to_atom(Cookie)),
            process_args(T, [{"cookie", Cookie}|Acc]);
        [Key, Value] ->
            process_args(T, [{Key, Value}|Acc]);
        _ ->
            process_args(T, Acc)
    end.

start_distribution(Name, NameType) ->
    ok = start_epmd(),
    application:set_env(net_kernel, dist_auto_connect, false), %% Hidden node
    {ok, _} = net_kernel:start([Name, NameType]),
    ok.

start_epmd() ->
    [] = os:cmd(epmd_path() ++ " -daemon"),
    ok.

epmd_path() ->
    ErtsBinDir = filename:dirname(escript:script_name()),
    Name = "epmd",
    case os:find_executable(Name, ErtsBinDir) of
        false ->
            case os:find_executable(Name) of
                false ->
                    fail("Could not find epmd.");
                GlobalEpmd ->
                    GlobalEpmd
            end;
        Epmd ->
            Epmd
    end.

nodename(Name) ->
    case string:tokens(Name, "@") of
        [_Node, _Host] ->
            list_to_atom(Name);
        [Node] ->
            [_, Host] = string:tokens(atom_to_list(node()), "@"),
            list_to_atom(lists:concat([Node, "@", Host]))
    end.

append_node_suffix(Name, Suffix) ->
    case string:tokens(Name, "@") of
        [Node, Host] ->
            list_to_atom(lists:concat([Node, Suffix, os:getpid(), "@", Host]));
        [Node] ->
            list_to_atom(lists:concat([Node, Suffix, os:getpid()]))
    end.

success(String) ->
    success(String, []).

success(String, Args) ->
    Msg = lists:flatten(io_lib:format(String, Args)),
    io:format("{\"changed\": true, \"msg\": ~p}", [Msg]),
    halt(0).

fail(String) ->
    fail(String, []).

fail(String, Args) ->
    Msg = lists:flatten(io_lib:format(String, Args)),
    io:format("{\"failed\" : true, \"msg\": ~p}", [Msg]),
    halt(1).

format_parse_error({_Line, Mod, Err}) ->
    lists:flatten(Mod:format_error(Err)).

get_arg(Key, Args) ->
    get_arg(Key, Args, undefined).

get_arg(Key, Args, Default) ->
    proplists:get_value(Key, Args, Default).

rpc(Mod, Fun, Args, Opts) ->
    rpc(Mod, Fun, Args, Opts, fun(X) -> success("~p", [X]) end).

rpc(Mod, Fun, Args, Opts, Callback) ->
    Node    = nodename(get_arg("node", Opts)),
    Timeout = get_arg("rpc_timeout", Opts, ?RPC_TIMEOUT),
    case rpc:call(Node, Mod, Fun, Args, Timeout) of
        {badrpc, Reason} ->
            fail("RPC to ~p failed: ~p", [Node, Reason]);
        Result ->
            Callback(Result)
    end.
